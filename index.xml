<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
    <channel>
      <title>Xelitky</title>
      <link>https://xelatura.cz</link>
      <description>Posledních 10 poznámek on Xelitky</description>
      <generator>Quartz -- quartz.jzhao.xyz</generator>
      <item>
    <title>Xelitky</title>
    <link>https://xelatura.cz/</link>
    <guid>https://xelatura.cz/</guid>
    <description>Xelitky Xelovy IT poznámky na maturitu Poznámky z IT na přípravu k maturitě roku 2024 Poznámky jsou tvořené v programu Obsidian.</description>
    <pubDate>Tue, 21 May 2024 21:54:52 GMT</pubDate>
  </item><item>
    <title>Switch Javy</title>
    <link>https://xelatura.cz/PRG/Java/Switch-Javy</link>
    <guid>https://xelatura.cz/PRG/Java/Switch-Javy</guid>
    <description>Switch Javy Místo psaní mnoha příkazů if..else můžete použít příkaz switch. Příkaz switch vybere jeden z mnoha bloků kódu, který se má provést: Syntaxe switch(výraz) { case x: // blok kódu break; case y: // blok kódu break; výchozí: // blok kódu } Takto to funguje: Výraz switch se vyhodnotí jednou.</description>
    <pubDate>Tue, 21 May 2024 21:54:10 GMT</pubDate>
  </item><item>
    <title>Terminálový výstup Javy</title>
    <link>https://xelatura.cz/PRG/Java/Termin%C3%A1lov%C3%BD-v%C3%BDstup-Javy</link>
    <guid>https://xelatura.cz/PRG/Java/Termin%C3%A1lov%C3%BD-v%C3%BDstup-Javy</guid>
    <description>Terminálový výstup Javy Tisk provede metoda System.out.print(); int i = 5; System.out.print(i); //vytiskne hodnotu 5 Pokud chceme vytisknout více proměnných nebo i nějaký řetězec ...</description>
    <pubDate>Tue, 21 May 2024 21:54:10 GMT</pubDate>
  </item><item>
    <title>While cyklus Javy</title>
    <link>https://xelatura.cz/PRG/Java/While-cyklus-Javy</link>
    <guid>https://xelatura.cz/PRG/Java/While-cyklus-Javy</guid>
    <description>While cyklus Javy Cykly mohou provádět blok kódu, dokud je splněna zadaná podmínka. Cykly jsou užitečné, protože šetří čas, snižují počet chyb a činí kód čitelnějším.</description>
    <pubDate>Tue, 21 May 2024 21:54:10 GMT</pubDate>
  </item><item>
    <title>Assembler</title>
    <link>https://xelatura.cz/PRG/Z%C3%A1kladn%C3%AD-info-o-PRG/Assembler</link>
    <guid>https://xelatura.cz/PRG/Z%C3%A1kladn%C3%AD-info-o-PRG/Assembler</guid>
    <description>Assembler Zkráceně označováno ASM Assembler = jazyk symbolických adres generace kódu Úzce svázaný se strojovým kódem Každá instrukce (kombinace 0 a 1) strojového kódu má odpovídající ...</description>
    <pubDate>Tue, 21 May 2024 21:54:10 GMT</pubDate>
  </item><item>
    <title>Programovací jazyk</title>
    <link>https://xelatura.cz/PRG/Z%C3%A1kladn%C3%AD-info-o-PRG/Programovac%C3%AD-jazyk</link>
    <guid>https://xelatura.cz/PRG/Z%C3%A1kladn%C3%AD-info-o-PRG/Programovac%C3%AD-jazyk</guid>
    <description>Programovací jazyk generace kódu Čísla jsou vnímána již jako proměnné, zdrojový kód připomíná matematický zápis → vysoká čitelnost kódu Jazyky dělené podle způsobu překladu a ...</description>
    <pubDate>Tue, 21 May 2024 21:54:10 GMT</pubDate>
  </item><item>
    <title>Strojový kód</title>
    <link>https://xelatura.cz/PRG/Z%C3%A1kladn%C3%AD-info-o-PRG/Strojov%C3%BD-k%C3%B3d</link>
    <guid>https://xelatura.cz/PRG/Z%C3%A1kladn%C3%AD-info-o-PRG/Strojov%C3%BD-k%C3%B3d</guid>
    <description>Strojový kód generace kódu tvoří nuly a jedničky - kombinace odpovídají různým instrukcím procesoru Procesor PC vykonává jen omezené množství jednoduchých instrukcí v podobě ...</description>
    <pubDate>Tue, 21 May 2024 21:54:10 GMT</pubDate>
  </item><item>
    <title>Syntax a sématika</title>
    <link>https://xelatura.cz/PRG/Z%C3%A1kladn%C3%AD-info-o-PRG/Syntax-a-s%C3%A9matika</link>
    <guid>https://xelatura.cz/PRG/Z%C3%A1kladn%C3%AD-info-o-PRG/Syntax-a-s%C3%A9matika</guid>
    <description>Syntaxe a sémantika jazyka Syntaxe Souhrn pravidel udávajících přípustné tvary dílčích konstrukcí a celého programu Jednodušší na odhalení → většina pokročilejších programovacích ...</description>
    <pubDate>Tue, 21 May 2024 21:54:10 GMT</pubDate>
  </item><item>
    <title>For cyklus Javy</title>
    <link>https://xelatura.cz/PRG/Java/For-cyklus-Javy</link>
    <guid>https://xelatura.cz/PRG/Java/For-cyklus-Javy</guid>
    <description>Cyklus For Javy Pokud přesně víte, kolikrát chcete projít blok kódu, použijte místo cyklu while cyklus for: Syntaxe for (příkaz 1; příkaz 2; příkaz 3) { // blok kódu, který se má provést ...</description>
    <pubDate>Tue, 21 May 2024 21:54:10 GMT</pubDate>
  </item><item>
    <title>For-Each cyklus Javy</title>
    <link>https://xelatura.cz/PRG/Java/For-Each-cyklus-Javy</link>
    <guid>https://xelatura.cz/PRG/Java/For-Each-cyklus-Javy</guid>
    <description>For-Each cyklus Javy Existuje smyčka “for-each”, která se používá výhradně k procházení prvků v poli: Syntaxe for (typ variableName : arrayName) { // blok kódu, který se provede ...</description>
    <pubDate>Tue, 21 May 2024 21:54:10 GMT</pubDate>
  </item>
    </channel>
  </rss>