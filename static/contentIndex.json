{"Blok-1---Developments/DM/CSS/Info":{"title":"Info","links":[],"tags":[],"content":""},"Blok-1---Developments/DM/Grafika/Barevný-model":{"title":"Barevný model","links":[],"tags":[],"content":"Barevný model\n\nBarevný model je matematický model popisující barvy na základě podílu jednotlivých složek, kterými mohou být vybrané základní barvy nebo jiné parametry. Množina barev definovaná daným barevným modelem se nazývá barevný prostor.\nNejznámější barevné modely jsou:\n\nRGB (Red, Green, Blue) - aditivní barevný model používaný například v digitální fotografii.\nCMYK - subtraktivní barevný model používaný pro barevný tisk.\nDalší modely zahrnují například HSV a Lab.\n\n\n\nPřehled barevných modelů\nRGB\n\nRGB (Red, Green, Blue) je aditivní barevný model, kde kombinací tří barev - červené, zelené a modré - lze získat téměř všechny barvy barevného spektra.\nVariantou je RGBA (Red, Green, Blue, Alpha) s přidaným alfa kanálem pro průhlednost.\nsRGB je standardní barevný prostor pro většinu monitorů, definuje základní RGB barvy, hodnotu gamma a teplotu bílé barvy.\nDalší variantou je Adobe RGB, s větším gamutem než sRGB, zejména v oblasti zeleno-azurové barvy.\n\nCMY a CMYK\n\nCMYK je subtraktivní barevný model, používaný především v tisku.\nObsahuje tři základní barvy - azurovou (Cyan), purpurovou (Magenta) a žlutou (Yellow), s přidáním čtvrté barvy - černé (Key black) pro zlepšení kvality a úsporu na tisku.\nBarvy vyjádřené v RGB nelze přesně zobrazit v CMYK a naopak, což vede k problémům s tiskem fotografií, zejména poklesu brilance barev.\n"},"Blok-1---Developments/DM/Grafika/Grafické-Formáty":{"title":"Grafické Formáty","links":["Blok-1---Developments/DM/Grafika/Rozlišení"],"tags":[],"content":"Grafické formáty\nGrafické formáty stanovují pravidla, podle kterých je obrázek uložen v souboru. Některé formáty mohou do souboru ukládat i další informace, např. náhled obrázku v malém Rozlišení, informace o expozici, datu a čase pořízení a podobně.\nDruhy grafických formátů\nBitmapový (rastrová grafika)\n\nObraz se skládá z jednotlivých pixelů (bodů), z nichž každý má definovánu určitou barvu.\n\nVektorový\n\nObraz se skládá z jednotlivých geometrických objektů (např. obdélník, elipsa, křivka), které mají definovanou barvu a styl obrysu a výplně. Jednotlivé objekty jsou popsány parametry obrysu, obvykle koeficienty Bézierových křivek 2. nebo 3. řádu.\n\nKomprese grafických formátů\nRozeznáváme dva základní druhy komprese grafických formátů: bezeztrátovou a ztrátovou.\nBezeztrátová komprese\n\nI po komprimaci zachovávají soubory identickou informaci s předlohou. Nedochází tak ke ztrátě kvality obrazu. Obvykle není tak účinná jako ztrátová komprese dat.\n\nZtrátová komprese\n\nPři kompresi zahazují část grafické informace. Používá se tam, kde je možné ztrátu některých informací tolerovat a kde nevýhoda určitého zkreslení je bohatě vyvážena velmi významným zmenšením souboru.\n\nZákladní grafické formáty\nRastrové formáty\nBezeztrátové\n\nBMP: Jednoduchý formát bitmapového obrázku.\nGIF (Graphic Interchange Format): Grafický formát určený pro rastrovou grafiku, umožňuje animace.\nPNG (Portable Network Graphics): Grafický formát určený pro bezeztrátovou kompresi rastrové grafiky.\nRAW: Soubor nijak neupravených digitalizovaných dat ze snímače digitálního fotoaparátu.\nDNG (Digital Negative): Nejmodernější formát tzv. digitálního negativu.\n\nZtrátové\n\nJPEG (Joint Photographic Experts Group): Standardní metoda ukládání snímků se ztrátovou kompresí.\nHEIF (High Efficiency Image File Format): Nový kontejner pro ukládání obrázků s vysokou efektivní kompresí.\nAVIF: Otevřený formát kódování podobný formátu HEIC.\n\nZtrátové i bezeztrátové\n\nJPEG XL: Formát navržený tak, aby výrazně překonal existující rastrové formáty.\nWDP (Windows Media Photo, HD Photo): Obrázkový kompresní algoritmus a souborový formát určený pro fotografie.\n\nVektorové formáty\n\nSVG (Scalable Vector Graphics): Značkovací jazyk a formát souboru, který popisuje dvojrozměrnou vektorovou grafiku pomocí XML.\n"},"Blok-1---Developments/DM/Grafika/Pixel":{"title":"Pixel","links":["Blok-1---Developments/DM/Grafika/Rozlišení"],"tags":[],"content":"Pixel\npicture element\nPředstavuje jeden svítící bod na monitoru, resp. jeden bod obrázku, charakterizovaný jasem a barvou, např. ve formátu RGB či CMYK.\nPopis\n\nBody na obrazovce tvoří čtvercovou síť a každý pixel je možné jednoznačně identifikovat podle jeho souřadnic.\nU barevných obrazovek se každý pixel skládá ze tří svítících obrazců odpovídajících základním barvám – červené, modré a zelené.\nNežádoucí efekty při zobrazování na monitoru zahrnují např. aliasing, moaré, neostrosti, mozaikové zkreslení, ztráta informací při zmenšování, zvětšování nebo otáčení obrazu apod.\n\nVelikost pixelu\n\nVelikost pixelu záleží na typu monitoru.\nU obvyklých analogových typů lze velikost pixelu měnit změnou Rozlišení.\nLCD obrazovky mají počet fyzických pixelů (tzv. nativní Rozlišení) zpravidla pevně vázaný na používané Rozlišení.\n\nBěžná rozlišení obrazovek\n\nObrazovky mají Rozlišení od zhruba 1280 × 720 (HD) po 3840 × 2160 (4K).\nVelikost jednoho pixelu může být sotva 0,3 mm.\nMaximální možné Rozlišení monitoru se udává v jednotkách „bod na palec“ (zkratka DPI z anglického dots per inch).\n\nMegapixel\n\nJeden megapixel zapisujeme je 1 milión pixelů, tj. bodů.\nOznačuje nejen počet bodů v obrázku, ale také maximální Rozlišení digitálního fotoaparátu nebo displeje.\n\nRozlišení displeje\n\nRozlišení monitoru nebo displeje je počet pixelů, které může být zobrazeno na obrazovce.\nČasto se udává jako počet sloupců (horizontálně, „X“) a počet řádků (vertikálně, „Y“).\nNejpoužívanější Rozlišení jsou:\n\n1024×768 (XGA/XVGA, eXtended),\n1280×800 (WXGA, Wide XGA, hlavně u notebooků),\n1366x768 (hlavně u notebooků)\n1600×1200 (UXGA, Ultra-eXtended)[1]\n1920x1080 FHD, Full HD nebo 1080p\n2560x1440 QHD, QuadHD nebo WQHD\n3440x1440 UWQHD, Ultra-Wide Quad HD\n\n\n\nMnoho uživatelů, zejména uživatelů CADu a hráčů video her, používá Rozlišení 1600×1200 (UXGA) nebo vyšší, pokud mají odpovídající zařízení. Pro digitální televizi a HDTV je typické vertikální Rozlišení 720 nebo 1080 řádků."},"Blok-1---Developments/DM/Grafika/Rastrová-grafika":{"title":"Rastrová grafika","links":["Blok-1---Developments/DM/Grafika/Rozlišení"],"tags":[],"content":"Rastrová grafika\nbitmapová grafika\nV rastrové grafice je celý obrázek popsán pomocí jednotlivých barevných bodů (pixelů). Body jsou uspořádány do mřížky. Každý bod má určen svou přesnou polohu a barvu v nějakém barevném modelu (např. RGB). Tento způsob popisu obrázků používá např. televize nebo digitální fotoaparát.\nKvalitu záznamu obrázku ovlivňuje především Rozlišení a barevná hloubka. Rozmístění a počet barevných bodů obvykle odpovídají zařízení, na kterém se obrázek vykresluje (monitor, tiskárna). Pokud se obrázek zobrazuje na monitoru, pak většinou stačí Rozlišení 72 DPI, pro tisk na tiskárně 300 DPI.\nPro převod obrazových předloh (klasické fotografie, kreseb a dalších) do rastrové grafiky slouží skener nebo digitální fotoaparát.\nNevýhody rastrové grafiky\n\nZměna velikosti (zvětšování nebo zmenšování) vede ke zhoršení obrazové kvality obrázku.\nZejména zvětšování obrázku je možné jen v omezené míře, neboť při větším zvětšení je na výsledném obrázku patrný rastr.\nPoměrně velké nároky na paměťové zdroje (při vysokém Rozlišení a barevné hloubce velikost obrázku dosahuje i jednotek megabytů, v profesionální grafice se běžně operuje i s podklady o desítkách megabytů).\n\nVýhody rastrové grafiky\n\nPřirozená volba pro digitální fotografii (a některé další typy grafiky).\nPořízení obrázku je velmi snadné například pomocí fotoaparátu nebo pomocí skeneru\n\nFormáty\nPoužívané formáty grafických souborů dělíme na nekomprimované a komprimované, komprimované pak na formáty s bezeztrátovou či ztrátovou kompresí:\n\nBMP (Bitmap): Jednoduchý formát pro ukládání nekomprimovaných obrázků, často používaný v operačních systémech Windows.\nGIF (Graphics Interchange Format): Formát vhodný pro obrázky s omezeným počtem barev, často používaný pro animace a obrázky s průhledným pozadím na webových stránkách.\nJPEG (Joint Photographic Experts Group): Velmi rozšířený formát pro komprimované fotografie, který umožňuje volbu úrovně komprese a tedy i kvality obrazu. Často používaný pro fotografie na webu a ve sdílených souborech.\nJPEG 2000: Vylepšená verze formátu JPEG, která poskytuje lepší kompresi a kvalitu obrazu, ale není tak široce podporována jako původní JPEG.\nJPEG XL: Moderní formát vyvinutý pro efektivní kompresi obrazových dat při zachování vysoké kvality obrazu a podpory pro různé funkce, jako je například progresivní načítání.\nPCX: Starší formát používaný pro rastrovou grafiku, který byl často používán v minulosti v počítačových hrách a dalších aplikacích.\nPNG (Portable Network Graphics): Formát vhodný pro webové obrázky, který podporuje průhlednost a zachování kvality bez ztráty (bezeztrátová komprese).\nTIFF (Tagged Image File Format): Formát často používaný v profesionální fotografii a grafice, který podporuje různé typy datových kompresí a barevných prostorů.\nWebP: Moderní formát vyvinutý společností Google, který nabízí efektivní kompresi a podporu pro animace a průhlednost. Často využívaný pro obrázky na webu s cílem zlepšit rychlost načítání stránek.\n"},"Blok-1---Developments/DM/Grafika/Rozlišení":{"title":"Rozlišení","links":[],"tags":[],"content":"Rozlišení\nRozlišení (anglicky resolution) monitoru nebo displeje je počet pixelů (nebo maximální rozlišení obrazu), které může být zobrazeno na obrazovce (monitoru). Tento pojem se občas používá i u videa, zaměnitelně se slovem rozměr. Udává se jako počet sloupců (též bodů na šířku či horizontální rozlišení, „X“) – to se uvádí jako první – a počet řádků (bodů na výšku, vertikální rozlišení, „Y“). Méně často se používá pojem barevné rozlišení, které vyjadřuje bitovou hloubku (potažmo počet barev) daného zobrazení.\nMezi nejčastější rozlišení posledních let patří:\n\nu monitorů stolních počítačů: 1920 × 1080 (Full HD), 1920 × 1200, 2560 × 1440 (QHD), 3440 × 1440, 3840 × 2160 (4K)\nu notebooků: 1920 × 1080 (Full HD) či 3840 × 2160 (4K)\nu tabletů: 1280 × 720 (HD) nebo 1280 × 800, 2048 × 1536, 2560 × 1440 (QHD)\nu chytrých telefonů: 320 × 480, 480 × 800, 540 × 960 (qHD), 1280 × 720 (HD), 1920 1080 (Full HD), u nejdražších 3840 × 2160 (4K)\nu televizí: 1280 × 720 (HD), 1920 × 1080 (Full HD) a 3840 × 2160 (4K)\nv profesionálních grafických/postprodukčních studiích: 1920 × 1080 (Full HD), 2K, 4K\n"},"Blok-1---Developments/DM/Grafika/Vektorová-grafika":{"title":"Vektorová grafika","links":["Blok-1---Developments/DM/Grafika/Pixel"],"tags":[],"content":"Vektorová grafika\nVektorový obrázek je složen ze základních, přesně definovaných útvarů, jako jsou body, přímky, křivky a mnohoúhelníky.\nVýhody\n\nJe v ní možné libovolné zmenšování nebo zvětšování obrázku beze ztráty kvality (viz ukázka v úvodu článku).\nJe možné pracovat s každým objektem v obrázku odděleně.\nVýsledná paměťová náročnost obrázku je u jednolitých barevných obrázků menší, než při použití rastrového zápisu (Např. černé kolečko se zapíše jako kruh o daném poloměru vyplněný černou barvou – tedy 3 informace, zatímco u bitmapy by bylo zapotřebí definovat každý Pixel zvlášť, přitom pořád dokola téměř stejnou informací – Pixel barvy #000000 o souřadnici [x,y], Pixel barvy #000000 o souřadnici [x+1,y], Pixel barvy #000000 o souřadnici [x+2,y], atd.).\n\nNevýhody\n\nOproti rastrové grafice zpravidla složitější pořízení obrázku. V rastrové grafice lze obrázek snadno pořídit pomocí fotoaparátu nebo skeneru.\nPřekročí-li složitost grafického objektu určitou mez, začne být vektorová grafika náročnější na operační paměť a procesor (“Mikroprocesor”) než grafika bitmapová.\nNehodí se na zápis složitých barevných ploch, například fotografie.\n\nPoužití\nVektorová grafika se používá zejména pro počítačovou sazbu, tvorbu ilustrací, diagramů, logotypů, nebo při tvorbě flashových animací. Pro práci s vektorovou grafikou se používají vektorové editory (např. Adobe Illustrator, CorelDRAW, Inkscape nebo Zoner Callisto 5).\nFormáty vektorové grafiky\n\n.eps, .ps – PostScript\n.pdf – Portable Document Format\n.ai – Adobe Illustrator Artwork\n.cdr – Corel Draw\n.svg – Scalable Vector Graphics\n.zmf – Zoner Callisto\n"},"Blok-1---Developments/DM/HTML/Info":{"title":"Info","links":[],"tags":[],"content":""},"Blok-1---Developments/DM/Info":{"title":"Info","links":[],"tags":[],"content":""},"Blok-1---Developments/DM/PHP/Info":{"title":"Info","links":[],"tags":[],"content":""},"Blok-1---Developments/DM/Web/Info":{"title":"Info","links":[],"tags":[],"content":""},"Blok-1---Developments/DM/Zvuk/Formát-kódování-audia":{"title":"Formát kódování audia","links":[],"tags":[],"content":"Formát kódování audia\nDefinice a příklady\n\nFormát kódování audia (někdy též formát komprese audia) je formát obsahu pro ukládání nebo přenos digitálního audia, používaný mimo jiné v digitální televizi, digitálním rádiu a audio a video souborech.\nPříklady formátů kódování audia jsou MP3, AAC, Vorbis, FLAC a Opus.\n\nAudio kodek\n\nKonkrétní softwarová nebo hardwarová implementace schopná komprese a dekomprese do a z daného formátu kódování audia se nazývá audio kodek.\nPříkladem audio kodeku je LAME, který softwarově implementuje kódování a dekódování audia do a z formátu MP3.\n\nStandardy a specifikace\n\nNěkteré formáty kódování audia jsou popsány detailní technickou specifikací nebo standardizovány.\nSpecifikace a standardy jsou napsány a schváleny standardizační organizací a známy jako standardy kódování audia.\nPojem „standard“ se někdy kromě formálních standardů používá i pro de facto standardy.\n\nKontejnery a metadata\n\nAudio obsah zakódovaný v určitém formátu kódování audia je obvykle zapouzdřen v kontejneru obsahujícím metadata.\nMP3 soubory jsou výjimkou, neobsahují kontejner a metadata jsou přidávána jako nestandardní rozšíření.\n\nVztah k videu a multimediálním kontejnerům\n\nVe video souborech je zakódovaný audio obsah spojen s videem uvnitř multimediálního kontejneru.\n\nAlgoritmy a komprese\n\nFormát kódování audia neurčuje všechny algoritmy, které mají použít kodeky implementující daný formát.\nDůležitou součástí ztrátové audio komprese je odstraňování informací podle psychoakustického modelu.\n\nTypy formátů\n\nExistují bezeztrátové, ztrátové a nekomprimované formáty kódování audia.\n\nBezeztrátové, ztrátové a nekomprimované formáty\n\nBezeztrátové formáty zachovávají původní informace a jsou dekódovatelné do své původní podoby.\nZtrátové formáty dále redukují data na úkor trvalé ztráty informace.\nBěžní uživatelé často používají ztrátové formáty pro jejich praktičnost, ale existují i bezeztrátové formáty s větší velikostí.\nNěkdy se používají i nekomprimované formáty jako pulzně kódová modulace.\n"},"Blok-1---Developments/DM/Zvuk/Zvuk":{"title":"Zvuk","links":[],"tags":[],"content":"Zvuk\nZvuk je mechanické vlnění v látkovém prostředí, které je schopno vyvolat sluchový vjem. Frekvence tohoto vlnění, které je člověk schopen vnímat, jsou značně individuální a leží v intervalu přibližně 16 Hz až 20 000 Hz. Mechanické vlnění mimo tento frekvenční rozsah sluchový vjem nevyvolává, přesto se někdy také označuje jako zvuk.\nFrekvenci nižší než 16 Hz má infrazvuk, slyší jej např. sloni. Frekvenci vyšší než 20 kHz má ultrazvuk, který mohou vnímat např. psi, delfíni či netopýři. Děje, které jsou spojeny se vznikem zvuku, jeho šířením a vnímáním, se nazývají akustika a stejný název má i věda, která tyto děje zkoumá."},"Blok-1---Developments/DM/Zvuk/Zvuková-karta":{"title":"Zvuková karta","links":[],"tags":[],"content":"Zvuková karta\nZvuková karta je rozšiřující karta počítače, která umožňuje vstup a výstup zvukového signálu, ovládaná softwarově.\nObsah zvukové karty\n\nZvukový čip: Provádí digitálně-analogový převod záznamu.\nVýstup: Většinou 3,5mm jack-sluchátkový konektor.\nLine in: Konektor pro připojení externího zdroje zvukového signálu.\nMikrofonový vstup: Konektor pro přímé připojení mikrofonu.\nMIDI a GamePort konektor: Pro připojení MIDI zařízení a herního vybavení.\n\nDigitalizace zvuku\n\nVzorkování: Záznam signálu pomocí vzorků v časových intervalech.\nVzorkovací frekvence: 11,025 kHz (telefonní kvalita), 22,05 kHz (rádio kvalita), 44,1 kHz (CD kvalita), 48,0 kHz, 96,0 kHz.\nPočet bitů na vzorek: 8, 16, nebo 24.\n\nDalší funkce\n\nCD-ROM mechanika: Dříve propojená s IDE rozhraním, dnes zbytečná díky moderním rozhraním.\nAudio kabel: Propojuje CD-ROM mechaniku se zvukovou kartou, ale většina přehrávačů se obejde bez něj.\n"},"Blok-1---Developments/DM/Zvuk/Záznam-zvuku":{"title":"Záznam zvuku","links":[],"tags":[],"content":"Záznam zvuku\nZáznamem zvuku se rozumí vytváření audiozáznamu, trvanlivé mechanické, magnetické nebo optické stopy zvukových vln, kterou lze při reprodukci opakovaně proměňovat ve zvukový signál.\nPoužití\n\nNejčastěji pro hudbu, zpěv, řeč a jiné zvuky.\nKultura, zábava, dokumentace, studium jazyků, registrace letu a další účely.\n\nTypy záznamu a reprodukce\nMechanické\n\nNahrávání: Pohyb membrány přenášený na rycí jehlu.\nReprodukce: Jehla snímá profil drážky a rozeznívá membránu.\n\nElektromagnetické\n\nNahrávání: Pohyb membrány převáděn na elektrický proud.\nReprodukce: Přečtený elektrický signál rozechvívá reproduktorovou membránu.\n\nOptické\n\nDetaily nezahrnuty.\n\nAnalogový vs. Digitální záznam\nAnalogový\n\nNahrávání: Mechanický (rycí jehla) nebo elektromagnetický (záznamová hlava).\nReprodukce: Mechanický (jehla) nebo elektromagnetický (magnetická snímací hlava).\n\nDigitální\n\nNahrávání: Vzorkování zvuku vyšší frekvencí, číselné hodnoty tlaku vzduchu se zaznamenávají na elektronických pamětech.\nReprodukce: Z číselných údajů se vytváří spojitý analogový signál.\n\nPřednosti digitálního záznamu\n\nVětší odolnost proti mechanickému opotřebení a poškození.\nKvalita reprodukce se s časem a opakovaným přehráváním nezhoršuje.\n"},"Blok-1---Developments/DTS/DB-SQL/Info":{"title":"Info","links":[],"tags":[],"content":""},"Blok-1---Developments/DTS/DB-modelování/Info":{"title":"Info","links":[],"tags":[],"content":""},"Blok-1---Developments/DTS/DB-obecně/Info":{"title":"Info","links":[],"tags":[],"content":""},"Blok-1---Developments/DTS/Info":{"title":"Info","links":[],"tags":[],"content":""},"Blok-1---Developments/PRG/Algoritmizace/Info":{"title":"Info","links":[],"tags":[],"content":""},"Blok-1---Developments/PRG/Info":{"title":"Info","links":[],"tags":[],"content":""},"Blok-1---Developments/PRG/Java/Datové-typy":{"title":"Datové typy","links":[],"tags":[],"content":"Datové typy\n\nJavovské typy se dělí na dvě skupiny:\nPrimitivní (neobjektový přístup)\n\nCeločíselné\nReálné\nZnakové\nLogické\n\n\nReferenční (objektový přístup)\n\nŘetězce\n\n\n\nPrimitivní datové typy\nCeločíselné typy\n\nnejpoužívanějším je int\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDatový typRozsahRozsahbyte1 bajt-128 až 127short2 bajty-32,768 až 32,767int4 bajty-2,147,483,648 až 2,147,483,647long8 bajtů-9,223,372,036,854,775,808 až 9,223,372,036,854,775,807\nReálné datové typy\n\nJako desetinný separátor se vždy používá tečka!\nPři použití typu float musíme ve zdrojovém kódu psát sufix F\n\nfloat f = 3.14F;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDatový typRozsahPřesnostfloat4 bajty7 decimálních číslicdouble8 bajtů15 decimálních číslic\nZnakový typ\n\nJe pouze jeden – char\nMá velikost 16 bitů\nVyužívání kódování UNICODE\nNa znaky se díváme jako na celá čísla → využíváme stejné operátory jako u celočíselného datového typu\nZnakové konstanty se zapisují několika způsoby:\n\nJeden znak, který se píše do apostrofů\n\nPř. &#039;A&#039;\n\n\nEscape sekvence (tj. speciální znaky)\n\nPř. &#039;\\n&#039;\n\n\nPosloupnost znaků \\‘uXXXX, kde XXXX představuje kód znaku v kódování UNICODE\n\nPř. &#039;\\u000A&#039; (=nový řádek), &#039;\\u0159&#039; (= ř)\n\n\n\n\n\nLogický typ\n\nPoužívá se typ boolean o velikosti 1 bit\nMůže nabývat dvou hodnot\n\nlogická konstanta true (= pravda, logická 1)\nfalse (= nepravda, logická 0)\n\n\nPoužívá se hodně u podmínek\n\nboolean jeSplnenTest = false;\nboolean jeVetsiCislo = cislo &gt; 5;\nReferenční datové typy\n\nReferenční datové typy jsou složitější než primitivní a nemají omezenou délku\nIdentifikátor tohoto typu začíná vždy velkým písmenem!\nTypickým zástupce je datový typ String\n\nSlouží pro ukládání řetězců → musí být ohraničeny uvozovkami\nLze používat diakritika\n\n\n\nString jmeno = &quot;Jan&quot;;\nString pozdrav = &quot;Dobrý den&quot;;\n\nSpojení dvou a více řetězců do jednoho\n\npomocí spojovacího operátoru +\n\n\n\nString s1 = &quot;eps&quot;;\nString s2 = &quot;2&quot;;\nString s3 = s1 + s2;      //vytvori retezec eps2\n\nŘetězce lze spojovat i s hodnotami jiného typu\n\nint x = 42;\nString s = &quot;Odpověď je &quot; + x;   //vytvori retezec Odpověď je 42\nPřetypování\n\nProměnné lze přiřadit pouze hodnotu stejného typu\nChceme-li přiřadit jiný typ, je nutné přetypování (typová konverze)\nJméno datového typu zapisujeme do kulatých závorek před proměnnou, kterou chceme přetypovat\n\nchar c = &#039;A&#039;;\nint i = (int) c;\nchar d = (char) i;\n\nPozor!\nPřetypování má nejvyšší prioritu → celý výraz je třeba dát do závorek\n\n(double) i + j     //přetypuje se jen i\n(double) (i+j)     //správně\n\nImplicitní – proběhne automaticky\n\nJe to konverze z typů s nižším rozsahem na typy s vyšším rozsahem\nbyte → short → int → long → float → double\n\n\n\nint i = 5;\ndouble d = i;     //d bude 5.0\n\nExplicitní – je nutno zapsat do programu\n\nOpačný směr, tj. z vyššího rozsahu na nižší → může dojít ke ztrátě nebo změně původní hodnoty → musí se zapsat operátor přetypování!\n\n\ndouble → float → long → int → short → byte\n\ndouble d = 5.253;\nint i = (int) d;      //i bude 5"},"Blok-1---Developments/PRG/Java/Hlavní-program":{"title":"Hlavní program","links":[],"tags":[],"content":"Hlavní program\n\nTvoří hlavní metoda main()\nPo spuštění programu je vyvolána jako první\nMusí se vždy takto jmenovat a musí být v programu vždy uvedena\nMusí být umístěna v nějaké třídě, která je označena jako public\nMusí mít přesně tuto podobu:\n\npublic static void main(String[] args){\n\t//tělo metody main\n}"},"Blok-1---Developments/PRG/Java/Java":{"title":"Java","links":["Blok-1---Developments/PRG/Základní-info-o-PRG/Programovací-jazyk"],"tags":[],"content":"Java\n\nvznik v roce 1995 ve společnosti Sun Microsystems\npojmenován podle indonéské odrůdy kávy\n\nVýhody jazyka\n\nObjektově orientovaný Programovací jazyk\nZdarma\nNezávislý na platformě\nSilná typovost jazyka\nVyužití v prostředí jazyku\nMožnost práce s multimédii\nVysoký výkon\nBezpečnost\n\nNevýhody jazyka\n\nHardwarová náročnost\nRychlý vývoj jazyka\n\nV současné době, ale již jsou základní funkce standardizovány\n\n\nRozsáhlost jazyka\nSložitější práce se standardním vstupem/výstupem\nPoněkud nižší rychlost běhu programu (čím vyšší verze jazyka, tím je zpomalení nižší)\nDélka zápisu kódu\n\nPoužití jazyka\n\nDesktopové a webové aplikace\nMobilní aplikace pro operační systém Android\nServletů (tj. programy běžící na serverech)\nPoužívá se na komplexní aplikace a to hlavně ve finančním a telekomunikačním sektoru\nV ČR jsou stovky firem, které Javu používají\n\nNapř. Oracle, Home Credit, O2, Česká Spořitelna, IBM, T-Mobile, ZEBRA, DHL, …\n\n\n\nHistorie jazyka\n\n1990 – Green Project\n1992 – OAK, použitý na PDA\n1995 – první verze Javy, Java pro Netscape\n1996 – Java 1.0, další podpora Javy\n1997 – Java 1.1, Java Web Server\n1999 – XML, NetBeans (Praha), J2SE, J2EE, J2ME\n2004 – Java SE 5\n2006 – Java SE 6\n\nEdice jazyka\nJava Standard Edition (Java SE)\n\nje vlastně Java, tak jak byla vyvíjena od první verze a postupně rozšiřována.\nKdyž firma Sun Microsystems zavedla termín platforma Java, bylo třeba původní kolekci API odlišit od ostatních verzí, proto vzniklo toto označení.\n\nJava Enterprise Edition (Java EE)\n\nje sada knihoven do Java SE určených pro vývoj a provoz podnikových aplikací a informačních systémů\n\nJava Micro Edition (Java ME)\n\nBěží v SIM kartách, pračkách a dalších elektronických zařízeních\n\nDistribuce jazyka\n\nPoužívání Javy pro běžný vývoj (i komerční) je zdarma\nRedistribuce javového běhového prostředí je možná zdarma\nRedistribuce javového vývojového prostředí je dovolena/omezena konkrétními licenčními podmínkami\nDříve vyvíjela společnost Sun → dnes společnost Oracle\n\nImplementace jazyka\nPro spuštění aplikací\n\nAplikací je zapotřebí JRE (Java Runtime Environment) = běhové prostředí obsahující virtuální stroj\n\nPro vývoj aplikací\n\nJe zapotřebí JDK (Java Development Kit), které obsahuje knihovny a nástroje pro vývojáře\nPokročilé vývojové nástroje již mají implementováno\n\nVývojová prostředí\n\nEclipse\nNetBeans\nJBuilder\nIntelliJ IDEA\nBlueJ\nGreenfoot\naj.\n\nKomponenty jazyka Java\nProgramovací jazyk Java (Java Language Definition)\n\nSyntaxe a sémantika jazyka\n\nJava Virtual Machine (JVM)\n\nVirtuální stroj\n\nJava API (základní knihovna tříd)\n\nKnihovny a SW komponenty → nástroje pro práci se soubory, DB, řetězci, grafikou apod.\nJsou sdružovány do balíčku tzv. packages\n\nZpracování programu\n\nProgram je tvořen jedním nebo několika zdrojovými soubory s příponou .java\nZdrojové soubory se přeloží kompilátorem javac do mezikódu (bajtový kód)\n\nJe nezávislý na konkrétním HW a SW vybavení počítače\nPřekladem ze souboru .java vznikne nový soubor .class → tento soubor může být spuštěn pouze na JVM\n\n\nJavovský virtuální stroj (JVM) provádí převod bajtového kódu do strojového kódu příslušného procesoru → tento proces se nazývá interpretace\nPřeklad do bajtového kódu je proveden pouze jednou, interpretace při každém spuštění programu\nBajtový kód lze dekompilovat a získat zpět zdrojový kód původního programu → zdrojový kód by neměl obsahovat žádné citlivé informace (např. hesla)\n.jar\n\nSpustitelný java soubor (ekvivalence .exe souboru)\nVytváří se explicitně přes příkazový řádek nebo v nabídce vývojového prostředí\n\n\n\nPrvní program v Javě\npublic class PrvniProgram{\n\tpublic static void main(String[] args){\n\t\tSystem.out.println(“Hello world!“);\n\t}\n}\nVysvětlivky:\n\nTřída\nMetoda (funkce) – první řádek se nazývá hlavička metody\nPříkaz – musí končit středníkem\n\nKonvence a syntaxe zápisu\n\nSoubor se zdrjovým kódem musí mít název shodný s názvem třídy a příponu .java\n\nViz příklad PrvniProgram.java\n\n\nTřídy se vždy píší s prvním velkým písmenem\nKaždá metoda musí mít za názvem závorky ()\nPro ukončení každého příkazu se používá oddělovač středník\n\nJeden příkaz lze umístit na více řádků → někdy lépe čitelné\n\n\nSkupinu dvou a více příkazů můžeme uzavřít do bloku kódu (příkazy se uzavřou mezi složené závorky, za závorku nepíšeme středník)\nVnořené úseky kódu se odsazují – nemá vliv na běh programu, ale zvyšuje čitelnost programu\nJava důsledně rozlišuje malá a velká písmena (case sensitive)!!\n"},"Blok-1---Developments/PRG/Java/Komentáře":{"title":"Komentáře","links":[],"tags":[],"content":"Komentáře\n\nPomáhají vyznat se ve zdrojovém kódu\nDoporučení – komentovat ihned při vytváření úseků kódů, ne „až na to někdy budu mít čas“\nV Javě máme 3 typy\nJednořádkový\n\nZačíná // a platnost je do konce řádku\n\n\n\n utrata = pocetPiv * 28; //kolik jsem zaplatil\n\nBlokový\n\nZačíná znaky /* a až do výskytu znaků */ je vše komentář\nLze komentovat i v rámci několika řádků\nPíše se vždy před komentovaným kódem\n\n\n\n/*\ninkrementace proměnné i,\nprotože to algoritmus vyžaduje\n*/\ni++;\n\nDokumentační\n\nZačíná znaky /** a končí znaky */\nPoužívá se pro automatické generování dokumentace programem javadoc.exe\n\n\n"},"Blok-1---Developments/PRG/Java/Konvence-a-syntaxe-zápisu-identifikátorů":{"title":"Konvence a syntaxe zápisu identifikátorů","links":[],"tags":[],"content":"Konvence a syntaxe zápisu identifikátorů\n\nJava důsledně rozlišuje malá a velká písmena! (case sensitive)\n\nPř. prvni.java není to samé jako Prvni.java\n\n\nidentifikátor musí začínat písmenem, podtržítkem nebo $\n\n(pozn.: ale poslední dvě jmenované nedoporučuji)\n\n\nNázvy nesmí obsahovat diakritiku a mezeru\nPokud název tvoří více slov, začíná každé slovo velkým písmenem kvůli lepší čitelnosti\n\nPř. pocetSlov, druheJmeno, …\nTento styl se označuje jako Velbloudí notace\n(anglicky Camel Case, stylizováno jako camelCase)\n\n\nAlternativní zápis pomocí hadí notace\n\nPř. pocet_slov, druhe_jmeno\n\n\n\n\n\nTřídy a rozhraní\n\nZačíná vždy velkým písmenem a ostatní písmena jsou malá (př. String)\nTřída se musí jmenovat stejně jako soubor, ve kterém je uložena!\n\n\nMetody a proměnné\n\nZačíná malým písmenem (př. pocet, start())\nMetoda se od proměnné liší tím, že metody mají za jménem uvedeny vždy kulaté závorky\n\n\nKonstanty\n\nPouze velká písmena, ve víceslovných je oddělovačem podtržítko (př. PI, MAX_VALUE)\n\n\nBalíky\n\nPouze malá písmena, ve složených názvech je oddělovačem tečka (př.\njava.util)\n\n\n\n\n\nJako identifikátory se nesmí používat následující klíčová slova:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nabstractcontinuefornewswitchassertpackagesynchronizeddefaultgotobooleandoifprivatethisbreakelseimportpublicthrowbyteenumimplementsprotectedthrowscasedoubleinstanceofreturntransientcatchextendsintshorttrycharfinalinterfacestaticvoidclassfinallylongstrictfpvolatileconstfloatnativesuperwhile"},"Blok-1---Developments/PRG/Java/Proměnné":{"title":"Proměnné","links":[],"tags":[],"content":"Proměnné\n\nProměnná je pojmenované místo v paměti\nSlouží k uchování hodnoty za běhu programu\nKaždá proměnná má jméno a datový typ\n\nPomocí jména se na proměnnou odkazujeme\nDatový typ udává, jaké hodnoty můžeme do proměnné ukládat (př. reálná čísla, řetězce, …)\n\n\n\n\nZápis\n\nKonvence a syntaxe zápisu\n\nNázev začíná vždy malým písmenem nebo podtržítkem\nNázev nesmí začínat číslovkou (ale později v názvu již může být použita)\nV případě, že je název tvořen více slovy, začíná každé slovo velkým písmenem\nPř. pocet2, pocetPrvku\n\n\nDeklarace\n\nProměnnou je nutno před prvním použitím deklarovat (definovat), tj. stanovit jméno a datový typ (do paměti se uloží automaticky)\n\n\n\nint cislo;\nchar znak1, znak2;\nPřiřazení hodnoty\n\nHodnotu uložíme do proměnné operátorem přiřazení → proměnná = výraz (hodnota);\n\ncislo = 42;\n\nPrvní přiřazení do proměnné nazýváme inicializace\nInicializaci proměnné je možné spojit s její deklarací\n\nint cislo = 42;\n\nInicializace musí proběhnout před prvním čtením!\n\nint i;\nint j;\nj = i + 2;//chyba při překladu\nDeklarace proměnných\n\nDoporučení\nKaždá proměnná by měla být deklarována na samostatné řádce a okomentovaná\n\ndouble celkemPlat; //celkový plat\n\nPozn.: Je povoleno deklarovat více proměnných na jeden řádek\n\nint i, j;\n\nKaždá explicitně inicializovaná proměnná by měla být deklarována samostatně\n\nint i;\nint j = 1;\n\nMezi deklaracemi proměnných a dalšími příkazy je vhodné mít prázdnou řádku kvůli přehlednosti\n\nOperátor přiřazení\n•Pozor na následující terminologii\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nVýrazi * 2 + 3Přiřazeníj = i * 2 + 3Příkazj = i * 2 + 3;\n\nTo znamená:\n\nVýraz má vždy hodnotu (číselnou, znakovou nebo pravdivostní)\nPřiřazení je výraz a jeho hodnotou je hodnota přiřazená levé straně\nPřiřazení se stává příkazem, je-li ukončeno středníkem\n\n\n"},"Blok-1---Developments/PRG/Základní-info-o-PRG/Assembler":{"title":"Assembler","links":[],"tags":[],"content":"Assembler\n\nZkráceně označováno ASM\nAssembler = jazyk symbolických adres\n\n\ngenerace kódu\n\n\nÚzce svázaný se strojovým kódem\n\nKaždá instrukce (kombinace 0 a 1) strojového kódu má\nodpovídající slovní označení (kód) → nemusíme si pamatovat čísla\n\n\nInstrukce jsou poté přeloženy opět do strojového kódu, který procesor vykoná\nCo čip, to jiná sada instrukcí\n"},"Blok-1---Developments/PRG/Základní-info-o-PRG/Programovací-jazyk":{"title":"Programovací jazyk","links":["Blok-1---Developments/PRG/Java/Java","Blok-1---Developments/PRG/Základní-info-o-PRG/Assembler"],"tags":[],"content":"Programovací jazyk\n\n\n\ngenerace kódu\n\n\nČísla jsou vnímána již jako proměnné, zdrojový kód připomíná matematický zápis → vysoká čitelnost kódu\nJazyky dělené podle způsobu překladu a spuštění (toto členění není absolutní):\n\nKompilované jazyky\nInterpretované jazyky\nJazyky s virtuálním strojem\n\n\n\nDělení dle způsobu překladu\nKompilované jazyky\n\nJazyk, kterému člověk rozumí\nZdrojový kód se překládá do strojového kódu, aby ho procesor mohl spustit → zajišťuje překladač (kompiler)\nKód se překládá celý najednou a teprve poté se vykoná\nPříklady jazyků: C, C++, Pascal, Delphi\n\nVýhody\n\nRychlost\nNepřístupnost zdrojového kódu\n\nProgram se šíří již přeložený, bez zdrojového kódu nelze měnit\n\n\nSnadné odhalení chyb ve zdrojovém kódu\n\nPokud zdrojový kód obsahuje chybu, při kompilaci proces spadne a objeví se chybové hlášení\n\n\n\nNevýhody\n\nZávislost na platformě\n\nPlatforma = procesor + operační systém\n\n\nNemožnost editace\n\nJakmile se program jednou zkompiluje do strojového kódu, nelze ho editovat jinak, než opětovnou kompilací\n\n\nMemory management\n\nMůžeme se setkat s přetečením paměti (tj. chceme uložit více dat, než na kolik máme místo)\nTyto jazyky obvykle nemají automatickou správu paměti\n\n\n\nInterpretované jazyky\n\nMísto kompilátoru se používá interpret → nepřekládá celý program najednou, ale pouze tu část, která je v danou chvíli potřeba\nPřeklad probíhá během běhu programu po instrukcích (po jednotlivých řádcích kódu) → časově a výkonově náročnější\nPříklad jazyka: BASIC, Perl, Python, shell, Ruby\n\nVýhody\n\nPřenositelnost\n\nPlně přenositelný na různé platformy, pokud existuje vhodný interpret\n\n\nJednodušší vývoj\n\nNemusíme hlídat správu paměti\nNěkdy nemusíme hlídat ani datové typy\n\n\nStabilita\n\nPředchází chybám, které by zkompilovaný program jinak klidně vykonal\n\n\nJednoduchá editace\n\nProgram můžeme vyvíjet po částech\n\n\n\nNevýhody\n\nRychlost\nČasto obtížné hledání chyb\n\nChyby se objeví až při běhu programu\n\n\nZranitelnost\n\nProtože se program šíří v podobě zdrojového kódu, každý do něj může zasahovat nebo krást jeho části\n\n\n\nJazyky s virtuálním strojem\n\nPropojením pozitivních vlastností kompilovaných a interpretovaných jazyků vzniká tzv. virtuální stroj\nV současnosti nejmodernější podoba jazyka pro vývoj aplikací\nPříklady jazyků: Java, C#\nZdrojový kód je kompilátorem přeložen do tzv. mezikódu = bajt-kódu (bytecode) – Tj. strojový (binární) kód, který přímo podporuje objektové programování\nTento bajt-kód je interpretovaný tzv. virtuálním strojem (tj. interpretem = JVM = Java Virtual Machine) do strojového kódu, který procesor vykoná\n\nVýhody\n\nOdhalení chyb ve zdrojovém kódu\n\nDíky kompilaci do bajtkódu odhalíme chyby ve zdrojovém kódu\n\n\nStabilita\n\nInterpret zastaví proces před vykonáním nebezpečné operace a upozorní na chybu\n\n\nJednoduchý vývoj\n\nMáme k dispozici různé knihovny, správa paměti je hlídaná za nás\n\n\nSlušná rychlost\nMálo zranitelný kód\n\nAplikace se šíří jako zdrojový kód v bajtkódu, není tedy úplně jednoduše lidsky čitelná\n\n\nPřenositelnost\n\nNižší a Vyšší programovací jazyky\n\nDo skupiny vyšších jazyků dnes v podstatě patří všechny jazyky kromě Assembler a strojového kódu\n\nProcedurální a Neprocedurální programovací jazyky\nProcedurální\n\npopisuje výpočet pomocí posloupností příkazů a určuje přesný postup (algoritmus), jak danou úlohu řešit\nStrukturované\nObjektově orientované\nPř.: C, C++, C#, Java, Python, …\nZpracovávané údaje mají formu datových objektů různých typů, které jsou v programu reprezentovány pomocí proměnných resp. konstant\nProgram obsahuje deklarace a příkazy\nDeklarace definují význam jmen (identifikátorů)\nPříkazy předepisují akce s datovými objekty nebo způsob řízení výpočtu\n\nNeprocedurální\n\nprogramování pomocí definic co se dělat má a ne jak se to má dělat\nFunkcionální\nLogické\n\nFunkcionální jazyky\n\nvše popisuje pomocí funkcí (často matematických)\nčasto neexistují proměnné, program je soustavou funkcí, které pracují se seznamy prvků\nzpůsob programování je blízký klasické matematice\nZřetězené funkce postupně upravující data\nVe velké míře je uplatněna rekurze (funkce volá sama sebe)\nPř.: Lisp, Haskell, Miranda, …\n\nLogické jazyky\n\npopisují daný problém pomocí logických výroků\nprogramu zadáme klauzule (pravidla), vztahy a vstupní data, které dále využívá k řešení problému\ni zde se ve velké míře uplatňuje rekurze\npoužívají se k tvorbě umělé inteligence, k praktickému programování nejsou využitelné\nnejznámější zástupce je jazyk Prolog\nPř. Program v Prologu pro zjištění většího z čísel\n"},"Blok-1---Developments/PRG/Základní-info-o-PRG/Strojový-kód":{"title":"Strojový kód","links":[],"tags":[],"content":"Strojový kód\n\n\n\ngenerace kódu\n\n\ntvoří nuly a jedničky - kombinace odpovídají různým instrukcím procesoru\nProcesor PC vykonává jen omezené množství jednoduchých instrukcí v podobě sekvence bitů → v podobě čísel (obvykle hexadecimální tvar)\nInstrukce jsou tak elementární, že umožňují pouze např. načtení hodnoty z paměti do registru, sečtení hodnoty v registru s hodnotou v jiném registru apod.\nVelmi náročné – programátoři si museli pamatovat sekvenci nul a jedniček\nInstrukce se CPU předloží v binární podobě → extrémně nečitelné a závislost na instrukční sadě CPU\nKaždý program ale musí být nakonec do tohoto jazyka přeložen, aby mohl být spuštěn\n"},"Blok-1---Developments/PRG/Základní-info-o-PRG/Syntax-a-sématika":{"title":"Syntax a sématika","links":[],"tags":[],"content":"Syntaxe a sémantika jazyka\nSyntaxe\n\nSouhrn pravidel udávajících přípustné tvary dílčích konstrukcí a celého programu\nJednodušší na odhalení → většina pokročilejších programovacích prostředí dokáže chybu odhalit\n\nSémantika\n\nUdává význam jednotlivých konstrukcí\nTěžší na odhalení → většinou se projeví spadnutím programu, chybným výstupem, předčasným ukončením apod.\n"},"Blok-2---Operations/ELPO/Info":{"title":"Info","links":[],"tags":[],"content":""},"Blok-2---Operations/OS/Info":{"title":"Info","links":[],"tags":[],"content":""},"Blok-2---Operations/SÍTĚ/Info":{"title":"Info","links":[],"tags":[],"content":""},"Databáze-okruhy---výklad-od-AD":{"title":"Databáze okruhy - výklad od AD","links":[],"tags":[],"content":"Databáze okruhy - výklad od AD\nEntity, atributy, relace\nDMM\n\n\ncreate_database\n\n\ndrop_database\n\n\ncreate_table\n\n\ndrop_table\n\n\nalter_table\n\n\ncreate_index\n\n\nAtributy - DDL\n\n\nintager - celočislo\n\ntiny\nsmall\nmedium\n\n\n\nvarchar - alfanumericky řetězec\n\n\ndate - datum\n\n\ntimestamp - unix timestamp - od 1.1.1970 v sekundách\n\n\nfloat - desetinná místa\n\n\ndouble\n\n\ncurrency - měna\n\n\nDML - Data Manupulation Language\n\nINSERT - vloží záznam\nLOAD - načte tabylku\nUPDATE - updatne záznam\nDELATE - smaže záznam\nTURNCATE - smaže a resetuje počítadla\n\nSELECT\n\nvybere data\nNOW - vrátí čas\naliasy - zástupné znaky, která nám pomáhají s prací\nORDER BY\nGROUP BY\n\npodmínka HAVEING\n\n\n\nSpojení\n\nINNER\nOUTER\nINNER_OUTER\n\nIntegrita\n\nreferenční integrita\n"},"To-do":{"title":"To-do","links":[],"tags":[],"content":"To-do\nÚkol - krátký popis úkolu\nPriorita - priorita splnění úkolu:\n\nNejvyšší priorita, je třeba udělat co nejdříve\nStřední priorita\nNejmenší priorita, dělat až jako poslední\n\nPřidělenci - kdo pracuje/pracoval na úkolu\nTo-do\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nÚkolPrioritaCSSHTMLPHPWebDatabázeDDLDMLAlgoritmizaceOOPŘídící strukturyJava\nV průběhu\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nÚkolPrioritaPřidělenci\nHotovo\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nÚkolPrioritaPřidělenciGrafika1XelaAudio1XelaZákladní indo o PRG1Xela"},"index":{"title":"Xelitky","links":["To-do"],"tags":[],"content":"Xelitky\nXelovy  IT poznámky na maturitu\n\nPoznámky z IT na přípravu k maturitě roku 2024\nPoznámky jsou tvořené v programu Obsidian.\n\nKolaborace\nNa Xelitkách se podílý studenti SOSVELu třídy IE4 ročníku 2023/2024. Jsme otevřeni pull requestům tady na GitHubu od ostatních lidí.\nTo-do\nV poznámce To-do se nachází seznam úkolů, které jsou třeba udělat.\nFormátování\nPoznámky se píší v programu Obsidian, takže se udržují pravidla formátování pro obsidian a tím pádem i pravidla pro formátování Markdownu. Vždy se píše na začátek poznámky nadpis H1, nespolíháme na pojmenování podle názvu souboru. Pro autory a díla existují šablony které by bylo dobré dodržovat. Jedinou změnou oproti formátování Obsidianu je používání Markdown-odkazů namísto Wiki-odkazů, to jde změnit v nastavení Obsidianu. \nStruktura souborů\nJediným pravidlem pro strukturu souborů je, že se ve složce nesmí nacházet pouze další podsložky. Vždy tam také musí být minimálně jedna poznámka."}}